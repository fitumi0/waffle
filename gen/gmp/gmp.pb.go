// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.1
// source: gmp.proto

package gmp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttachmentType int32

const (
	AttachmentType_ATTACHMENT_TYPE_UNSPECIFIED AttachmentType = 0
	AttachmentType_TEXT                        AttachmentType = 1
	AttachmentType_PHOTO                       AttachmentType = 2
	AttachmentType_VOICE                       AttachmentType = 3
	AttachmentType_VIDEO                       AttachmentType = 4
	AttachmentType_ROUND_VIDEO                 AttachmentType = 5
	AttachmentType_GEO                         AttachmentType = 6
	AttachmentType_GIF                         AttachmentType = 7
	AttachmentType_FILE                        AttachmentType = 8
	AttachmentType_STICKER                     AttachmentType = 9
	AttachmentType_ANIMATED_STICKER            AttachmentType = 10
	AttachmentType_MUSIC                       AttachmentType = 11
	AttachmentType_POLL                        AttachmentType = 12
)

// Enum value maps for AttachmentType.
var (
	AttachmentType_name = map[int32]string{
		0:  "ATTACHMENT_TYPE_UNSPECIFIED",
		1:  "TEXT",
		2:  "PHOTO",
		3:  "VOICE",
		4:  "VIDEO",
		5:  "ROUND_VIDEO",
		6:  "GEO",
		7:  "GIF",
		8:  "FILE",
		9:  "STICKER",
		10: "ANIMATED_STICKER",
		11: "MUSIC",
		12: "POLL",
	}
	AttachmentType_value = map[string]int32{
		"ATTACHMENT_TYPE_UNSPECIFIED": 0,
		"TEXT":                        1,
		"PHOTO":                       2,
		"VOICE":                       3,
		"VIDEO":                       4,
		"ROUND_VIDEO":                 5,
		"GEO":                         6,
		"GIF":                         7,
		"FILE":                        8,
		"STICKER":                     9,
		"ANIMATED_STICKER":            10,
		"MUSIC":                       11,
		"POLL":                        12,
	}
)

func (x AttachmentType) Enum() *AttachmentType {
	p := new(AttachmentType)
	*p = x
	return p
}

func (x AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmp_proto_enumTypes[0].Descriptor()
}

func (AttachmentType) Type() protoreflect.EnumType {
	return &file_gmp_proto_enumTypes[0]
}

func (x AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachmentType.Descriptor instead.
func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{0}
}

// TODO: Пока не используется
type MessageType int32

const (
	MessageType_SYSTEM  MessageType = 0
	MessageType_USER    MessageType = 1
	MessageType_BOT     MessageType = 2
	MessageType_CHANNEL MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "SYSTEM",
		1: "USER",
		2: "BOT",
		3: "CHANNEL",
	}
	MessageType_value = map[string]int32{
		"SYSTEM":  0,
		"USER":    1,
		"BOT":     2,
		"CHANNEL": 3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmp_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_gmp_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{1}
}

type ChatType int32

const (
	ChatType_CHAT_TYPE_PRIVATE ChatType = 0
	ChatType_CHAT_TYPE_GROUP   ChatType = 1
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "CHAT_TYPE_PRIVATE",
		1: "CHAT_TYPE_GROUP",
	}
	ChatType_value = map[string]int32{
		"CHAT_TYPE_PRIVATE": 0,
		"CHAT_TYPE_GROUP":   1,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_gmp_proto_enumTypes[2].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_gmp_proto_enumTypes[2]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{2}
}

type Attachment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  AttachmentType         `protobuf:"varint,2,opt,name=type,proto3,enum=gmp.AttachmentType" json:"type,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Attachment_Text
	//	*Attachment_File
	//	*Attachment_Url
	Content       isAttachment_Content `protobuf_oneof:"content"`
	FileName      string               `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MimeType      string               `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	mi := &file_gmp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_gmp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{0}
}

func (x *Attachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attachment) GetType() AttachmentType {
	if x != nil {
		return x.Type
	}
	return AttachmentType_ATTACHMENT_TYPE_UNSPECIFIED
}

func (x *Attachment) GetContent() isAttachment_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Attachment) GetText() string {
	if x != nil {
		if x, ok := x.Content.(*Attachment_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *Attachment) GetFile() []byte {
	if x != nil {
		if x, ok := x.Content.(*Attachment_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		if x, ok := x.Content.(*Attachment_Url); ok {
			return x.Url
		}
	}
	return ""
}

func (x *Attachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Attachment) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type isAttachment_Content interface {
	isAttachment_Content()
}

type Attachment_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type Attachment_File struct {
	File []byte `protobuf:"bytes,4,opt,name=file,proto3,oneof"`
}

type Attachment_Url struct {
	Url string `protobuf:"bytes,7,opt,name=url,proto3,oneof"` // TODO: Добавить другие типы контента
}

func (*Attachment_Text) isAttachment_Content() {}

func (*Attachment_File) isAttachment_Content() {}

func (*Attachment_Url) isAttachment_Content() {}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChatId        string                 `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ChatType      ChatType               `protobuf:"varint,3,opt,name=chat_type,json=chatType,proto3,enum=gmp.ChatType" json:"chat_type,omitempty"`
	SenderId      string                 `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Attachments   []*Attachment          `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_gmp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_gmp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *Message) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_CHAT_TYPE_PRIVATE
}

func (x *Message) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChatId        string                 `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	ReceivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_gmp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_gmp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Ack) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *Ack) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Ack) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ClientToServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ClientToServer_Message
	Event         isClientToServer_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	mi := &file_gmp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_gmp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{3}
}

func (x *ClientToServer) GetEvent() isClientToServer_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ClientToServer) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Event.(*ClientToServer_Message); ok {
			return x.Message
		}
	}
	return nil
}

type isClientToServer_Event interface {
	isClientToServer_Event()
}

type ClientToServer_Message struct {
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3,oneof"` // TODO: Добавить другие типы событий
}

func (*ClientToServer_Message) isClientToServer_Event() {}

type ServerToClient struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ServerToClient_Ack
	//	*ServerToClient_Message
	Event         isServerToClient_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	mi := &file_gmp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_gmp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_gmp_proto_rawDescGZIP(), []int{4}
}

func (x *ServerToClient) GetEvent() isServerToClient_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ServerToClient) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Event.(*ServerToClient_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *ServerToClient) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Event.(*ServerToClient_Message); ok {
			return x.Message
		}
	}
	return nil
}

type isServerToClient_Event interface {
	isServerToClient_Event()
}

type ServerToClient_Ack struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type ServerToClient_Message struct {
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

func (*ServerToClient_Ack) isServerToClient_Event() {}

func (*ServerToClient_Message) isServerToClient_Event() {}

var File_gmp_proto protoreflect.FileDescriptor

const file_gmp_proto_rawDesc = "" +
	"\n" +
	"\tgmp.proto\x12\x03gmp\x1a\x1fgoogle/protobuf/timestamp.proto\"\xca\x01\n" +
	"\n" +
	"Attachment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x04type\x18\x02 \x01(\x0e2\x13.gmp.AttachmentTypeR\x04type\x12\x14\n" +
	"\x04text\x18\x03 \x01(\tH\x00R\x04text\x12\x14\n" +
	"\x04file\x18\x04 \x01(\fH\x00R\x04file\x12\x12\n" +
	"\x03url\x18\a \x01(\tH\x00R\x03url\x12\x1b\n" +
	"\tfile_name\x18\x05 \x01(\tR\bfileName\x12\x1b\n" +
	"\tmime_type\x18\x06 \x01(\tR\bmimeTypeB\t\n" +
	"\acontent\"\xe8\x01\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\tR\x06chatId\x12*\n" +
	"\tchat_type\x18\x03 \x01(\x0e2\r.gmp.ChatTypeR\bchatType\x12\x1b\n" +
	"\tsender_id\x18\x04 \x01(\tR\bsenderId\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x121\n" +
	"\vattachments\x18\x06 \x03(\v2\x0f.gmp.AttachmentR\vattachments\"\xaa\x01\n" +
	"\x03Ack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\tR\x06chatId\x12;\n" +
	"\vreceived_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"receivedAt\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\"C\n" +
	"\x0eClientToServer\x12(\n" +
	"\amessage\x18\x01 \x01(\v2\f.gmp.MessageH\x00R\amessageB\a\n" +
	"\x05event\"a\n" +
	"\x0eServerToClient\x12\x1c\n" +
	"\x03ack\x18\x01 \x01(\v2\b.gmp.AckH\x00R\x03ack\x12(\n" +
	"\amessage\x18\x02 \x01(\v2\f.gmp.MessageH\x00R\amessageB\a\n" +
	"\x05event*\xc1\x01\n" +
	"\x0eAttachmentType\x12\x1f\n" +
	"\x1bATTACHMENT_TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04TEXT\x10\x01\x12\t\n" +
	"\x05PHOTO\x10\x02\x12\t\n" +
	"\x05VOICE\x10\x03\x12\t\n" +
	"\x05VIDEO\x10\x04\x12\x0f\n" +
	"\vROUND_VIDEO\x10\x05\x12\a\n" +
	"\x03GEO\x10\x06\x12\a\n" +
	"\x03GIF\x10\a\x12\b\n" +
	"\x04FILE\x10\b\x12\v\n" +
	"\aSTICKER\x10\t\x12\x14\n" +
	"\x10ANIMATED_STICKER\x10\n" +
	"\x12\t\n" +
	"\x05MUSIC\x10\v\x12\b\n" +
	"\x04POLL\x10\f*9\n" +
	"\vMessageType\x12\n" +
	"\n" +
	"\x06SYSTEM\x10\x00\x12\b\n" +
	"\x04USER\x10\x01\x12\a\n" +
	"\x03BOT\x10\x02\x12\v\n" +
	"\aCHANNEL\x10\x03*6\n" +
	"\bChatType\x12\x15\n" +
	"\x11CHAT_TYPE_PRIVATE\x10\x00\x12\x13\n" +
	"\x0fCHAT_TYPE_GROUP\x10\x012x\n" +
	"\x10MessengerService\x12=\n" +
	"\rMessageStream\x12\x13.gmp.ClientToServer\x1a\x13.gmp.ServerToClient(\x010\x01\x12%\n" +
	"\vSendMessage\x12\f.gmp.Message\x1a\b.gmp.AckB\x06Z\x04/gmpb\x06proto3"

var (
	file_gmp_proto_rawDescOnce sync.Once
	file_gmp_proto_rawDescData []byte
)

func file_gmp_proto_rawDescGZIP() []byte {
	file_gmp_proto_rawDescOnce.Do(func() {
		file_gmp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gmp_proto_rawDesc), len(file_gmp_proto_rawDesc)))
	})
	return file_gmp_proto_rawDescData
}

var file_gmp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gmp_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gmp_proto_goTypes = []any{
	(AttachmentType)(0),           // 0: gmp.AttachmentType
	(MessageType)(0),              // 1: gmp.MessageType
	(ChatType)(0),                 // 2: gmp.ChatType
	(*Attachment)(nil),            // 3: gmp.Attachment
	(*Message)(nil),               // 4: gmp.Message
	(*Ack)(nil),                   // 5: gmp.Ack
	(*ClientToServer)(nil),        // 6: gmp.ClientToServer
	(*ServerToClient)(nil),        // 7: gmp.ServerToClient
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_gmp_proto_depIdxs = []int32{
	0,  // 0: gmp.Attachment.type:type_name -> gmp.AttachmentType
	2,  // 1: gmp.Message.chat_type:type_name -> gmp.ChatType
	8,  // 2: gmp.Message.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 3: gmp.Message.attachments:type_name -> gmp.Attachment
	8,  // 4: gmp.Ack.received_at:type_name -> google.protobuf.Timestamp
	4,  // 5: gmp.ClientToServer.message:type_name -> gmp.Message
	5,  // 6: gmp.ServerToClient.ack:type_name -> gmp.Ack
	4,  // 7: gmp.ServerToClient.message:type_name -> gmp.Message
	6,  // 8: gmp.MessengerService.MessageStream:input_type -> gmp.ClientToServer
	4,  // 9: gmp.MessengerService.SendMessage:input_type -> gmp.Message
	7,  // 10: gmp.MessengerService.MessageStream:output_type -> gmp.ServerToClient
	5,  // 11: gmp.MessengerService.SendMessage:output_type -> gmp.Ack
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_gmp_proto_init() }
func file_gmp_proto_init() {
	if File_gmp_proto != nil {
		return
	}
	file_gmp_proto_msgTypes[0].OneofWrappers = []any{
		(*Attachment_Text)(nil),
		(*Attachment_File)(nil),
		(*Attachment_Url)(nil),
	}
	file_gmp_proto_msgTypes[3].OneofWrappers = []any{
		(*ClientToServer_Message)(nil),
	}
	file_gmp_proto_msgTypes[4].OneofWrappers = []any{
		(*ServerToClient_Ack)(nil),
		(*ServerToClient_Message)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gmp_proto_rawDesc), len(file_gmp_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gmp_proto_goTypes,
		DependencyIndexes: file_gmp_proto_depIdxs,
		EnumInfos:         file_gmp_proto_enumTypes,
		MessageInfos:      file_gmp_proto_msgTypes,
	}.Build()
	File_gmp_proto = out.File
	file_gmp_proto_goTypes = nil
	file_gmp_proto_depIdxs = nil
}

syntax = "proto3";

package gmp;

option go_package = "/gmp";

import "google/protobuf/timestamp.proto";

enum AttachmentType {
    ATTACHMENT_TYPE_UNSPECIFIED     = 0;

    TEXT                            = 1;
    PHOTO                           = 2;
    VOICE                           = 3;
    VIDEO                           = 4;
    ROUND_VIDEO                     = 5;
    GEO                             = 6;
    GIF                             = 7;
    FILE                            = 8;
    STICKER                         = 9;
    ANIMATED_STICKER                = 10;
    MUSIC                           = 11;
    POLL                            = 12;
}

message Attachment {
    string id = 1;
    AttachmentType type = 2;

    oneof content {
        string text = 3;
        bytes file = 4;
        string url = 7;
        // TODO: Добавить другие типы контента
    }

    string file_name = 5;
    string mime_type = 6;
}

// TODO: Пока не используется
enum MessageType {
    SYSTEM  = 0;
    USER    = 1;
    BOT     = 2;
    CHANNEL = 3;
}

// enum MessageStatus {
    // TODO: Нужно ли?
// }

message Message {
    string id = 1;
    string chat_id = 2;
    ChatType chat_type = 3;
    string sender_id = 4;
    google.protobuf.Timestamp timestamp = 5;
    repeated Attachment attachments = 6;
}

message Ack {
    string message_id = 1;
    string chat_id = 2;
    google.protobuf.Timestamp received_at = 3;

    bool success = 4;
    string error = 5;
}

enum ChatType {
    CHAT_TYPE_PRIVATE = 0;
    CHAT_TYPE_GROUP = 1;
}

// TODO: define presence, clientToServer, serverToClient, sendMessage

message ClientToServer {
    oneof event {
        Message message = 1;
        // TODO: Добавить другие типы событий
    }
}

message ServerToClient {
    oneof event {
        Ack ack = 1;
        Message message = 2;
        // TypingEvent typing = 2;
        // presence = 3;

        // TODO: Добавить другие типы событий
    }
}

service MessengerService {
    rpc MessageStream(stream ClientToServer) returns (stream ServerToClient);
    rpc SendMessage(Message) returns (Ack);
    // rpc SetPresence(SetPresence) returns (Ack);
    // rpc SubscribeChats(SubscriptionRequest) returns (Ack);
  }